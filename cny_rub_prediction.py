import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import requests
from sklearn.preprocessing import MinMaxScaler, RobustScaler  
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Dense, GRU
import tensorflow as tf

# =============================================================================
#                            НАСТРОЙКИ И КОНФИГУРАЦИЯ
# =============================================================================

# Фиксируем seed для воспроизводимости результатов
SEED = 11
np.random.seed(SEED)
tf.random.set_seed(SEED)

# Параметры модели и предобработки данных
LOOK_BACK = 7           # Количество дней (шагов), используемых для формирования входной последовательности
TEST_SIZE = 7           # Количество дней для тестирования (на графике будет прогноз на TEST_SIZE дней)
LSTM_UNITS = 50         # Число нейронов в слое LSTM
EPOCHS = 20             # Число эпох обучения
BATCH_SIZE = 1          # Размер батча для обучения

# =============================================================================
#                           ЗАГРУЗКА И ПОДГОТОВКА ДАННЫХ
# =============================================================================

# Раскомментировать для получения актуальных данных через API
# API_KEY = 'LADVC2GXIDTY9WOD'
# URL = f'https://www.alphavantage.co/query?function=FX_DAILY&from_symbol=CNY&to_symbol=RUB&apikey={API_KEY}&outputsize=compact'
# response = requests.get(URL)
# data = response.json()

# Пример для демонстрации
data = {'Meta Data': {'1. Information': 'Forex Daily Prices (open, high, low, close)', '2. From Symbol': 'CNY', '3. To Symbol': 'RUB', '4. Output Size': 'Compact', '5. Last Refreshed': '2025-02-10', '6. Time Zone': 'UTC'}, 'Time Series FX (Daily)': {'2025-02-10': {'1. open': '13.33860', '2. high': '13.35580', '3. low': '13.25800', '4. close': '13.30670'}, '2025-02-07': {'1. open': '13.26970', '2. high': '13.42830', '3. low': '13.26970', '4. close': '13.33860'}, '2025-02-06': {'1. open': '13.38550', '2. high': '13.47130', '3. low': '13.23300', '4. close': '13.30410'}, '2025-02-05': {'1. open': '13.87910', '2. high': '13.88330', '3. low': '13.38550', '4. close': '13.38550'}, '2025-02-04': {'1. open': '13.78680', '2. high': '13.85860', '3. low': '13.62200', '4. close': '13.73510'}, '2025-02-03': {'1. open': '13.60090', '2. high': '13.79900', '3. low': '13.59190', '4. close': '13.78680'}, '2025-01-31': {'1. open': '13.55580', '2. high': '13.64250', '3. low': '13.46770', '4. close': '13.60090'}, '2025-01-30': {'1. open': '13.64890', '2. high': '13.66030', '3. low': '13.47510', '4. close': '13.54200'}, '2025-01-29': {'1. open': '13.51240', '2. high': '13.71780', '3. low': '13.48150', '4. close': '13.64890'}, '2025-01-28': {'1. open': '13.45240', '2. high': '13.60350', '3. low': '13.38490', '4. close': '13.51060'}, '2025-01-27': {'1. open': '13.49590', '2. high': '13.54060', '3. low': '13.35300', '4. close': '13.45240'}, '2025-01-24': {'1. open': '13.70390', '2. high': '13.79180', '3. low': '13.49580', '4. close': '13.49580'}, '2025-01-23': {'1. open': '13.63840', '2. high': '13.74850', '3. low': '13.52510', '4. close': '13.70760'}, '2025-01-22': {'1. open': '13.71360', '2. high': '13.71360', '3. low': '13.52560', '4. close': '13.63840'}, '2025-01-21': {'1. open': '13.82870', '2. high': '14.00900', '3. low': '13.63670', '4. close': '13.71360'}, '2025-01-20': {'1. open': '13.97140', '2. high': '13.99910', '3. low': '13.82870', '4. close': '13.89730'}, '2025-01-17': {'1. open': '13.96940', '2. high': '14.03090', '3. low': '13.92450', '4. close': '13.97140'}, '2025-01-16': {'1. open': '14.01890', '2. high': '14.13190', '3. low': '13.96150', '4. close': '13.96940'}, '2025-01-15': {'1. open': '14.00450', '2. high': '14.09640', '3. low': '13.95250', '4. close': '14.01890'}, '2025-01-14': {'1. open': '14.04330', '2. high': '14.06700', '3. low': '14.00350', '4. close': '14.00350'}, '2025-01-13': {'1. open': '13.94270', '2. high': '14.05010', '3. low': '13.84640', '4. close': '14.00210'}, '2025-01-10': {'1. open': '13.94080', '2. high': '14.00940', '3. low': '13.81550', '4. close': '13.93960'}, '2025-01-09': {'1. open': '14.35070', '2. high': '14.35190', '3. low': '13.87240', '4. close': '13.94230'}, '2025-01-08': {'1. open': '14.64670', '2. high': '14.64670', '3. low': '14.23140', '4. close': '14.35070'}, '2025-01-07': {'1. open': '14.66300', '2. high': '14.66640', '3. low': '14.52830', '4. close': '14.56570'}, '2025-01-06': {'1. open': '15.12510', '2. high': '15.12510', '3. low': '14.51770', '4. close': '14.60800'}, '2025-01-03': {'1. open': '15.27030', '2. high': '15.27030', '3. low': '15.11270', '4. close': '15.12510'}, '2025-01-02': {'1. open': '15.54440', '2. high': '15.54450', '3. low': '15.13320', '4. close': '15.27030'}, '2025-01-01': {'1. open': '15.03080', '2. high': '15.03080', '3. low': '15.03080', '4. close': '15.03080'}, '2024-12-31': {'1. open': '15.13350', '2. high': '15.13680', '3. low': '14.51980', '4. close': '14.92800'}, '2024-12-30': {'1. open': '14.55390', '2. high': '15.13350', '3. low': '14.24360', '4. close': '15.13350'}, '2024-12-27': {'1. open': '13.69790', '2. high': '14.55390', '3. low': '13.65530', '4. close': '14.55390'}, '2024-12-26': {'1. open': '13.62790', '2. high': '13.73920', '3. low': '13.55170', '4. close': '13.69790'}, '2024-12-25': {'1. open': '13.76550', '2. high': '13.76550', '3. low': '13.61360', '4. close': '13.62770'}, '2024-12-24': {'1. open': '13.81270', '2. high': '13.83330', '3. low': '13.63110', '4. close': '13.76550'}, '2024-12-23': {'1. open': '14.19450', '2. high': '14.19490', '3. low': '13.74160', '4. close': '13.81380'}, '2024-12-20': {'1. open': '14.18000', '2. high': '14.27880', '3. low': '13.97690', '4. close': '14.19450'}, '2024-12-19': {'1. open': '14.36490', '2. high': '14.36490', '3. low': '14.06040', '4. close': '14.18000'}, '2024-12-18': {'1. open': '14.28560', '2. high': '14.46380', '3. low': '14.05170', '4. close': '14.34880'}, '2024-12-17': {'1. open': '14.28750', '2. high': '14.37480', '3. low': '13.94450', '4. close': '14.35410'}, '2024-12-16': {'1. open': '14.35810', '2. high': '14.35810', '3. low': '14.06910', '4. close': '14.22990'}, '2024-12-13': {'1. open': '14.44180', '2. high': '14.44180', '3. low': '14.10650', '4. close': '14.35810'}, '2024-12-12': {'1. open': '14.73230', '2. high': '14.73230', '3. low': '14.20780', '4. close': '14.45170'}, '2024-12-11': {'1. open': '14.13990', '2. high': '14.86450', '3. low': '13.99110', '4. close': '14.73230'}, '2024-12-10': {'1. open': '13.69950', '2. high': '14.20880', '3. low': '13.69430', '4. close': '14.13990'}, '2024-12-09': {'1. open': '13.79150', '2. high': '13.89140', '3. low': '13.62140', '4. close': '13.69950'}, '2024-12-06': {'1. open': '13.77070', '2. high': '14.05190', '3. low': '13.55700', '4. close': '13.82580'}, '2024-12-05': {'1. open': '14.24500', '2. high': '14.39740', '3. low': '13.77070', '4. close': '13.90190'}, '2024-12-04': {'1. open': '14.55080', '2. high': '14.56840', '3. low': '14.24500', '4. close': '14.24500'}, '2024-12-03': {'1. open': '14.40380', '2. high': '14.72590', '3. low': '14.40380', '4. close': '14.55080'}, '2024-12-02': {'1. open': '14.85570', '2. high': '14.92250', '3. low': '14.58510', '4. close': '14.64850'}, '2024-11-29': {'1. open': '14.79290', '2. high': '15.16880', '3. low': '14.63230', '4. close': '14.69880'}, '2024-11-28': {'1. open': '15.42470', '2. high': '15.61500', '3. low': '14.76590', '4. close': '14.76590'}, '2024-11-27': {'1. open': '14.47380', '2. high': '15.79310', '3. low': '14.46330', '4. close': '15.42470'}, '2024-11-26': {'1. open': '14.36060', '2. high': '14.85710', '3. low': '14.27020', '4. close': '14.47380'}, '2024-11-25': {'1. open': '14.25920', '2. high': '14.39980', '3. low': '14.10950', '4. close': '14.30550'}, '2024-11-22': {'1. open': '13.96540', '2. high': '14.39360', '3. low': '13.87240', '4. close': '14.39360'}, '2024-11-21': {'1. open': '13.84430', '2. high': '13.99350', '3. low': '13.84430', '4. close': '13.96540'}, '2024-11-20': {'1. open': '13.76920', '2. high': '13.89970', '3. low': '13.76900', '4. close': '13.88220'}, '2024-11-19': {'1. open': '13.79680', '2. high': '13.95860', '3. low': '13.78390', '4. close': '13.95860'}, '2024-11-18': {'1. open': '13.82100', '2. high': '13.85170', '3. low': '13.75370', '4. close': '13.79680'}, '2024-11-15': {'1. open': '13.75020', '2. high': '13.90170', '3. low': '13.74140', '4. close': '13.83150'}, '2024-11-14': {'1. open': '13.62230', '2. high': '13.84410', '3. low': '13.56090', '4. close': '13.76310'}, '2024-11-13': {'1. open': '13.56440', '2. high': '13.68640', '3. low': '13.54720', '4. close': '13.65670'}, '2024-11-12': {'1. open': '13.23340', '2. high': '13.59720', '3. low': '13.21160', '4. close': '13.58110'}, '2024-11-11': {'1. open': '13.60920', '2. high': '13.67800', '3. low': '13.23340', '4. close': '13.23340'}, '2024-11-08': {'1. open': '13.65960', '2. high': '13.72610', '3. low': '13.55650', '4. close': '13.57030'}, '2024-11-07': {'1. open': '13.68270', '2. high': '13.72080', '3. low': '13.55410', '4. close': '13.66230'}, '2024-11-06': {'1. open': '13.72540', '2. high': '13.83140', '3. low': '13.53950', '4. close': '13.67890'}, '2024-11-05': {'1. open': '13.84880', '2. high': '13.90210', '3. low': '13.68040', '4. close': '13.72540'}, '2024-11-04': {'1. open': '13.79150', '2. high': '13.96540', '3. low': '13.73450', '4. close': '13.84880'}, '2024-11-01': {'1. open': '13.61540', '2. high': '13.79150', '3. low': '13.61020', '4. close': '13.79150'}, '2024-10-31': {'1. open': '13.60200', '2. high': '13.67310', '3. low': '13.60200', '4. close': '13.64390'}, '2024-10-30': {'1. open': '13.69920', '2. high': '13.69920', '3. low': '13.56390', '4. close': '13.61480'}, '2024-10-29': {'1. open': '13.64810', '2. high': '13.73960', '3. low': '13.51800', '4. close': '13.70460'}, '2024-10-28': {'1. open': '13.61890', '2. high': '13.74360', '3. low': '13.54270', '4. close': '13.63000'}, '2024-10-25': {'1. open': '13.40910', '2. high': '13.66430', '3. low': '13.40180', '4. close': '13.54860'}, '2024-10-24': {'1. open': '13.47950', '2. high': '13.65690', '3. low': '13.47860', '4. close': '13.50540'}, '2024-10-23': {'1. open': '13.49290', '2. high': '13.60170', '3. low': '13.42970', '4. close': '13.46140'}, '2024-10-22': {'1. open': '13.54920', '2. high': '13.63510', '3. low': '13.43740', '4. close': '13.50760'}, '2024-10-21': {'1. open': '13.61250', '2. high': '13.69800', '3. low': '13.45550', '4. close': '13.55760'}, '2024-10-18': {'1. open': '13.57030', '2. high': '13.66000', '3. low': '13.43040', '4. close': '13.61250'}, '2024-10-17': {'1. open': '13.58140', '2. high': '13.72010', '3. low': '13.56950', '4. close': '13.57030'}, '2024-10-16': {'1. open': '13.57830', '2. high': '13.71660', '3. low': '13.57830', '4. close': '13.57870'}, '2024-10-15': {'1. open': '13.53390', '2. high': '13.73270', '3. low': '13.27570', '4. close': '13.57830'}, '2024-10-14': {'1. open': '13.59430', '2. high': '13.61200', '3. low': '13.48530', '4. close': '13.53390'}, '2024-10-11': {'1. open': '13.70460', '2. high': '13.74070', '3. low': '13.55140', '4. close': '13.55530'}, '2024-10-10': {'1. open': '13.77330', '2. high': '13.79510', '3. low': '13.63770', '4. close': '13.70460'}, '2024-10-09': {'1. open': '13.70710', '2. high': '14.06560', '3. low': '13.62470', '4. close': '13.77330'}, '2024-10-08': {'1. open': '13.68930', '2. high': '13.73130', '3. low': '13.56760', '4. close': '13.70710'}, '2024-10-07': {'1. open': '13.56810', '2. high': '13.71740', '3. low': '13.56810', '4. close': '13.68930'}, '2024-10-04': {'1. open': '13.49680', '2. high': '13.62510', '3. low': '13.46790', '4. close': '13.56810'}, '2024-10-03': {'1. open': '13.62500', '2. high': '13.62500', '3. low': '13.45980', '4. close': '13.49680'}, '2024-10-02': {'1. open': '13.43990', '2. high': '13.61260', '3. low': '13.43990', '4. close': '13.51820'}, '2024-10-01': {'1. open': '13.22970', '2. high': '13.65350', '3. low': '13.20270', '4. close': '13.65350'}, '2024-09-30': {'1. open': '13.30310', '2. high': '13.44600', '3. low': '13.21430', '4. close': '13.22970'}, '2024-09-27': {'1. open': '13.20970', '2. high': '13.31340', '3. low': '13.17810', '4. close': '13.30630'}, '2024-09-26': {'1. open': '13.09060', '2. high': '13.24310', '3. low': '13.08740', '4. close': '13.20970'}, '2024-09-25': {'1. open': '13.19940', '2. high': '13.25110', '3. low': '13.02610', '4. close': '13.11460'}, '2024-09-24': {'1. open': '13.22600', '2. high': '13.28070', '3. low': '13.13780', '4. close': '13.19940'}}}

# Преобразование данных из словаря в DataFrame
df = pd.DataFrame(data['Time Series FX (Daily)']).T
df = df.rename(columns={"4. close": "Close"})[["Close"]]
df.index = pd.to_datetime(df.index)
df = df.sort_index()        
df = df.astype(float)

# =============================================================================
#                         НОРМАЛИЗАЦИЯ ДАННЫХ
# =============================================================================

# Масштабирование значений в диапазон [0, 1]
scaler = MinMaxScaler()
scaled_data = scaler.fit_transform(df)

# Если в данных много выбросов:
# scaler = RobustScaler()
# scaled_data = scaler.fit_transform(df)

# =============================================================================
#                 ФУНКЦИЯ ФОРМИРОВАНИЯ ОБУЧАЮЩИХ ДАННЫХ
# =============================================================================

def create_dataset(dataset, look_back=1):
    """
    Создает массивы X (входные последовательности) и Y (целевые значения)
    из нормализованных данных, используя принцип скользящего окна.
    
    Аргументы:
        dataset: массив нормализованных данных.
        look_back: количество временных шагов в каждой последовательности.
    
    Возвращает:
        X, Y: numpy-массивы для обучения.
    """
    X, Y = [], []
    for i in range(len(dataset) - look_back):
        X.append(dataset[i:(i + look_back), 0])
        Y.append(dataset[i + look_back, 0])
    return np.array(X), np.array(Y)

# Формирование обучающих последовательностей
X, Y = create_dataset(scaled_data, LOOK_BACK)

# Преобразование X в формат (samples, timesteps, features) для LSTM
X = np.reshape(X, (X.shape[0], X.shape[1], 1))

# Определение размеров обучающей и тестовой выборок
train_size = len(X) - TEST_SIZE
X_train, X_test = X[:train_size], X[train_size:]
Y_train, Y_test = Y[:train_size], Y[train_size:]

# =============================================================================
#                      ПОСТРОЕНИЕ МОДЕЛИ LSTM
# =============================================================================

model = Sequential([
    LSTM(LSTM_UNITS, return_sequences=False, input_shape=(LOOK_BACK, 1)),
    Dense(1)
])
model.compile(loss='mean_squared_error', optimizer='adam')

# Вывод структуры модели LTSM
model.summary()

# =============================================================================
#                       ПОСТРОЕНИЕ МОДЕЛИ GRU
# =============================================================================

gru_model = Sequential([
    GRU(LSTM_UNITS, return_sequences=False, input_shape=(LOOK_BACK, 1)),
    Dense(1)
])
gru_model.compile(loss='mean_squared_error', optimizer='adam')

gru_model.summary()

# =============================================================================
#                           ОБУЧЕНИЕ МОДЕЛЕЙ
# =============================================================================

model.fit(X_train, Y_train, epochs=EPOCHS, batch_size=BATCH_SIZE)

gru_model.fit(X_train, Y_train, epochs=EPOCHS, batch_size=BATCH_SIZE)

# =============================================================================
#                           ПРОГНОЗИРОВАНИЕ
# =============================================================================

# Прогнозирование на тестовой выборке
test_predict = model.predict(X_test)

# Обратное преобразование прогнозных значений в исходный масштаб
test_predict = scaler.inverse_transform(test_predict)

# Прогнозирование с помощью модели GRU на тестовой выборке
gru_test_predict = gru_model.predict(X_test)
gru_test_predict = scaler.inverse_transform(gru_test_predict)

# =============================================================================
#                         ПОДГОТОВКА ГРАФИКА
# =============================================================================

blue_line = scaler.inverse_transform(scaled_data[LOOK_BACK:train_size+LOOK_BACK])
green_line = scaler.inverse_transform(scaled_data[train_size+LOOK_BACK-1:])
red_line = np.concatenate((blue_line[-1:], test_predict), axis=0)
purple_line = np.concatenate((blue_line[-1:], gru_test_predict), axis=0)

# Определение оси времени для графика
train_dates = df.index[LOOK_BACK:train_size+LOOK_BACK]
test_dates = df.index[train_size+LOOK_BACK-1:]

# =============================================================================
#                             ВИЗУАЛИЗАЦИЯ
# =============================================================================

plt.figure(figsize=(12, 6))
plt.plot(train_dates, blue_line, label='Обучающие данные', color='blue', linewidth=2)
plt.plot(test_dates, green_line, label='Фактический курс', color='green', linewidth=2)
plt.plot(test_dates, red_line, label='Прогноз LTSM', color='red', linestyle='-.', linewidth=2)
plt.plot(test_dates, purple_line, label='Прогноз GRU', color='purple', linestyle=':', linewidth=2)

plt.title('Курс юаня к рублю: Обучение и прогнозирование', fontsize=16)
plt.xlabel('Дата', fontsize=14)
plt.ylabel('Курс CNY/RUB', fontsize=14)
plt.legend(fontsize=12)
plt.grid(True, linestyle='--', alpha=0.6)
plt.tight_layout()
plt.show()